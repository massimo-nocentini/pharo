"
I represent intentend to provide complete coverage for the Continuation class.
"
Class {
	#name : #ContinuationTest,
	#superclass : #TestCase,
	#traits : 'TSeasonedSchemerContinuationTest',
	#classTraits : 'TSeasonedSchemerContinuationTest classTrait',
	#instVars : [
		'tmp',
		'tmp2'
	],
	#category : #'Kernel-Tests-Methods'
}

{ #category : #utilities }
ContinuationTest >> callcc: aBlock [

	^ Continuation currentDo: aBlock
]

{ #category : #tests }
ContinuationTest >> testBlockEscape [

	| x |
	tmp := 0.
	x := [ 
	     tmp := tmp + 1.
	     tmp2 value: nil ].
	self callcc: [ :cc | 
		tmp2 := cc.
		x value ].
	"Since tmp2 would hold a continuation in the previous block, 
	 than here it should reference an object that responds to #value:"
	tmp2 := [ :v |  ].
	x value.
	self assert: tmp equals: 2
]

{ #category : #tests }
ContinuationTest >> testBlockTemps [
	| y |
	#(1 2 3)
		do: [ :i | 
			| x |
			x := i.
			tmp
				ifNil: [ tmp2 := self
						callcc: [ :cc | 
							tmp := cc.
							[ :q |  ] ] ].
			tmp2 value: x.
			x := 17 ].
	y := self
		callcc: [ :cc | 
			tmp value: cc.
			42 ].
	self assert: y equals: 1
]

{ #category : #tests }
ContinuationTest >> testBlockVars [
	| continuation |
	tmp := 0.
	tmp := (self
		callcc: [ :cc | 
			continuation := cc.
			0 ]) + tmp.
	tmp2
		ifNotNil: [ tmp2 value ]
		ifNil: [ #(1 2 3)
				do: [ :i | 
					self
						callcc: [ :cc | 
							tmp2 := cc.
							continuation value: i ] ] ].
	self assert: tmp equals: 6
]

{ #category : #tests }
ContinuationTest >> testEnsureIsCalledAfterCallccNotThrown [

	| v flag |
	flag := nil.
	v := self callcc: [ :k | [ 3 ] ensure: [ flag := #ensured ] ].
	self
		assert: flag equals: #ensured;
		assert: v equals: 3
]

{ #category : #tests }
ContinuationTest >> testEnsureIsCalledAfterThrowing [

	| flag v |
	flag := nil.
	v := self callcc: [ :k | 
		     [ 1 + (k value: 3) ] ensure: [ flag := #ensured ] ].
	self
		assert: v equals: 3;
		assert: flag equals: nil
]

{ #category : #tests }
ContinuationTest >> testMethodTemps [
	| i continuation |
	i := 0.
	i := i + (self callcc: [:cc | continuation := cc. 1]).
	self assert: i ~= 3.
	i = 2 ifFalse: [ continuation value: 2 ]
]

{ #category : #tests }
ContinuationTest >> testReentrant [
	| assoc |
	assoc := self callcc: [ :cc | cc -> 0 ].
	assoc value: assoc value + 1.
	self assert: assoc value ~= 5.
	assoc value = 4
		ifFalse: [ assoc key value: assoc ]
]

{ #category : #tests }
ContinuationTest >> testSimpleCallCC [
	| x continuation |
	x := self callcc: [ :cc | continuation := cc. false ].
	x ifFalse: [ continuation value: true ].
	self assert: x
]

{ #category : #tests }
ContinuationTest >> testSimpleStoreCallCC [
	| x continuation |
	continuation := self callcc: #yourself.
	x := false.
	continuation = true
		ifTrue: [ x := true ]
		ifFalse: [ continuation value: true.
			self error: 'This message shouldn''t be sent, ever.' ].
	self assert: x
]

{ #category : #tests }
ContinuationTest >> testSimplestCallCC [
	| x |
	x := self callcc: [ :cc | cc value: true ].
	self assert: x
]

{ #category : #'instance creation' }
ContinuationTest >> try: tryBlock otherwise: otherwiseBlock [

	^ Continuation try: tryBlock otherwise: otherwiseBlock
]
